interface EmailFactor {
    delivery_method: "email";
    type: string;
    last_authenticated_at: string;
    email_factor: {
        email_id: string;
        email_address: string;
    };
}
interface PhoneNumberFactor {
    delivery_method: "sms" | "whatsapp";
    type: string;
    last_authenticated_at: string;
    phone_number_factor: {
        phone_id: string;
        phone_number: string;
    };
}
interface GoogleOAuthFactor {
    delivery_method: "oauth_google";
    type: string;
    last_authenticated_at: string;
    google_oauth_factor: {
        id: string;
        email_id: string;
        provider_subject: string;
    };
}
interface MicrosoftOAuthFactor {
    delivery_method: "oauth_microsoft";
    type: string;
    last_authenticated_at: string;
    microsoft_oauth_factor: {
        id: string;
        email_id: string;
        provider_subject: string;
    };
}
interface AppleOAuthFactor {
    delivery_method: "oauth_apple";
    type: string;
    last_authenticated_at: string;
    apple_oauth_factor: {
        id: string;
        email_id: string;
        provider_subject: string;
    };
}
interface FacebookOAuthFactor {
    delivery_method: "oauth_facebook";
    type: string;
    last_authenticated_at: string;
    facebook_oauth_factor: {
        id: string;
        email_id: string;
        provider_subject: string;
    };
}
interface GithubOAuthFactor {
    delivery_method: "oauth_github";
    type: string;
    last_authenticated_at: string;
    github_oauth_factor: {
        id: string;
        email_id: string;
        provider_subject: string;
    };
}
interface GitLabOAuthFactor {
    delivery_method: "oauth_gitlab";
    type: string;
    last_authenticated_at: string;
    gitlab_oauth_factor: {
        id: string;
        email_id: string;
        provider_subject: string;
    };
}
interface WebAuthnFactor {
    delivery_method: "webauthn_registration";
    type: string;
    last_authenticated_at: string;
    webauthn_factor: {
        webauthn_registration_id: string;
        domain: string;
        user_agent: string;
    };
}
interface AuthenticatorAppFactor {
    delivery_method: "authenticator_app";
    type: string;
    last_authenticated_at: string;
    authenticator_app_factor: {
        totp_id: string;
    };
}
interface RecoveryCodeFactor {
    delivery_method: "recovery_code";
    type: string;
    last_authenticated_at: string;
    recovery_code_factor: {
        totp_recovery_code_id: string;
    };
}
interface CryptoWalletFactor {
    delivery_method: "crypto_wallet";
    type: string;
    last_authenticated_at: string;
    recovery_code_factor: {
        crypto_wallet_address: string;
        crypto_wallet_type: string;
    };
}
type AuthenticationFactor = EmailFactor | PhoneNumberFactor | GoogleOAuthFactor | MicrosoftOAuthFactor | AppleOAuthFactor | FacebookOAuthFactor | GithubOAuthFactor | GitLabOAuthFactor | WebAuthnFactor | AuthenticatorAppFactor | RecoveryCodeFactor | CryptoWalletFactor;
type Session = {
    attributes: {
        ip_address: string;
        user_agent: string;
    };
    authentication_factors: Array<AuthenticationFactor>;
    expires_at: string;
    last_accessed_at: string;
    session_id: string;
    started_at: string;
    user_id: string;
};
type ResponseCommon = {
    request_id: string;
    status_code: number;
};
type User = {
    created_at: string;
    crypto_wallets: Array<{
        crypto_wallet_id: string;
        crypto_wallet_address: string;
        crypto_wallet_type: string;
        verified: boolean;
    }>;
    emails: Array<{
        email: string;
        email_id: string;
        verified: boolean;
    }>;
    name: {
        first_name: string;
        last_name: string;
        middle_name: string;
    };
    phone_numbers: Array<{
        phone_number: string;
        phone_id: string;
        verified: boolean;
    }>;
    providers: Array<{
        provider_subject: string;
        provider_type: string;
    }>;
    status: "active" | "pending";
    totps: Array<{
        totp_id: string;
        verified: boolean;
    }>;
    user_id: string;
    webauthn_registrations: Array<{
        domain: string;
        user_agent: string;
        verified: boolean;
        webauthn_registration_id: string;
    }>;
};
type AuthenticateResponse = ResponseCommon & {
    user_id: string;
    session_token: string;
    session_jwt: string;
    session: Session;
};
type DeleteResponse = ResponseCommon & {
    user_id: string;
};
type SessionDurationOptions = {
    session_duration_minutes: number;
};
type UnsubscribeFunction = () => void;
type WebAuthnAuthenticateStartOptions = {
    domain?: string;
};
type WebAuthnAuthenticateOptions = SessionDurationOptions;
type WebAuthnAuthenticateResponse = AuthenticateResponse & {
    webauthn_registration_id: string;
};
type WebAuthnRegisterResponse = ResponseCommon & {
    user_id: string;
    webauthn_registration_id: string;
};
type WebAuthnAuthenticateStartResponse = ResponseCommon & {
    userId: string;
    public_key_credential_request_options: string;
};
type WebAuthnRegisterStartOptions = {
    domain?: string;
    authenticator_type?: "platform" | "cross-platform";
};
type WebAuthnRegisterStartResponse = ResponseCommon & {
    user_id: string;
    public_key_credential_creation_options: string;
};
interface IHeadlessWebauthnClient {
    authenticate(publicKeyCredentialRequestOptions: string, options: WebAuthnAuthenticateOptions): Promise<WebAuthnAuthenticateResponse>;
    authenticateStart(options?: WebAuthnAuthenticateStartOptions): Promise<WebAuthnAuthenticateStartResponse>;
    register(publicKeyCredentialCreationOptions: string): Promise<WebAuthnRegisterResponse>;
    registerStart(options?: WebAuthnRegisterStartOptions): Promise<WebAuthnRegisterStartResponse>;
}
type UserOnChangeCallback = (user: User | null) => void;
type UserUpdateOptions = {
    name?: {
        first_name?: string;
        middle_name?: string;
        last_name?: string;
    };
    emails?: Array<{
        email: string;
    }>;
    phone_numbers?: Array<{
        phone_number: string;
    }>;
    crypto_wallets?: Array<{
        crypto_wallet_address: string;
        crypto_wallet_type: string;
    }>;
};
type UserUpdateResponse = ResponseCommon & {
    user_id: string;
    emails: User["emails"];
    phone_numbers: User["phone_numbers"];
    crypto_wallets: User["crypto_wallets"];
};
interface IHeadlessUserClient {
    get(): Promise<User>;
    update(options: UserUpdateOptions): Promise<UserUpdateResponse>;
    getSync(): User | null;
    onChange(callback: UserOnChangeCallback): UnsubscribeFunction;
    deleteEmail(emailId: string): Promise<DeleteResponse>;
    deletePhoneNumber(phoneId: string): Promise<DeleteResponse>;
    deleteWebauthn(webauthnId: string): Promise<DeleteResponse>;
    deleteCryptoWallet(cryptoWalletId: string): Promise<DeleteResponse>;
    deleteTOTP(totpId: string): Promise<DeleteResponse>;
}
type MagicLinksLoginOrCreateOptions = {
    signup_magic_link_url?: string;
    signup_expiration_minutes?: number;
    login_magic_link_url?: string;
    login_expiration_minutes?: number;
    captcha_token?: string | null;
    code_challenge?: string;
};
type MagicLinksLoginOrCreateResponse = ResponseCommon;
type MagicLinksAuthenticateOptions = SessionDurationOptions & {
    code_verifier?: string;
};
type MagicLinksAuthenticateResponse = AuthenticateResponse & {
    method_id: string;
};
interface IHeadlessMagicLinksClient {
    email: {
        loginOrCreate(email: string, options?: MagicLinksLoginOrCreateOptions): Promise<MagicLinksLoginOrCreateResponse>;
    };
    authenticate(token: string, options: MagicLinksAuthenticateOptions): Promise<MagicLinksAuthenticateResponse>;
}
type OAuthGetURLOptions = {
    login_redirect_url?: string;
    signup_redirect_url?: string;
    custom_scopes?: string[];
};
type OAuthAuthenticateOptions = SessionDurationOptions;
type OAuthAuthenticateResponse = AuthenticateResponse & {
    provider_subject: string;
    provider_type: string;
    provider_values: {
        access_token: string;
        id_token: string;
        refresh_token: string;
        scopes: string[];
        expires_at: string;
    };
};
interface IHeadlessOAuthClient {
    google: {
        /**
         * @deprecated - Prefer to use oauth.google.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    microsoft: {
        /**
         * @deprecated - Prefer to use oauth.microsoft.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    apple: {
        /**
         * @deprecated - Prefer to use oauth.apple.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    github: {
        /**
         * @deprecated - Prefer to use oauth.github.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    gitlab: {
        /**
         * @deprecated - Prefer to use oauth.gitlab.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    facebook: {
        /**
         * @deprecated - Prefer to use oauth.facebook.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    discord: {
        /**
         * @deprecated - Prefer to use oauth.discord.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    slack: {
        /**
         * @deprecated - Prefer to use oauth.slack.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    amazon: {
        /**
         * @deprecated - Prefer to use oauth.amazon.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    bitbucket: {
        /**
         * @deprecated - Prefer to use oauth.bitbucket.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    linkedin: {
        /**
         * @deprecated - Prefer to use oauth.linkedin.start. See https://stytch.com/docs/sdks/javascript-sdk/oauth/methods for details.
         */
        getUrl(options?: OAuthGetURLOptions): string;
        start(options?: OAuthGetURLOptions): Promise<void>;
    };
    authenticate(token: string, options: OAuthAuthenticateOptions): Promise<OAuthAuthenticateResponse>;
}
type SessionAuthenticateOptions = Partial<SessionDurationOptions>;
type SessionAuthenticateResponse = ResponseCommon & {
    session: Session;
    session_token: string;
    session_jwt: string;
};
type SessionRevokeResponse = ResponseCommon;
type SessionOnChangeCallback = (session: Session | null) => void;
interface IHeadlessSessionClient {
    getSync(): Session | null;
    onChange(callback: SessionOnChangeCallback): UnsubscribeFunction;
    authenticate(options?: SessionAuthenticateOptions): Promise<SessionAuthenticateResponse>;
    revoke(): Promise<SessionRevokeResponse>;
}
type OTPCodeOptions = {
    expiration_minutes: number;
};
type OTPAuthenticateOptions = {
    session_duration_minutes: number;
};
type OTPsLoginOrCreateResponse = ResponseCommon & {
    status_code: string;
    method_id: string;
};
type OTPsAuthenticateResponse = AuthenticateResponse & {
    method_id: string;
};
interface IHeadlessOTPsClient {
    sms: {
        loginOrCreate(phone_number: string, options?: OTPCodeOptions): Promise<OTPsLoginOrCreateResponse>;
    };
    whatsapp: {
        loginOrCreate(phone_number: string, options?: OTPCodeOptions): Promise<OTPsLoginOrCreateResponse>;
    };
    email: {
        loginOrCreate(email: string, options?: OTPCodeOptions): Promise<OTPsLoginOrCreateResponse>;
    };
    authenticate(otp: string, method_id: string, options?: OTPAuthenticateOptions): Promise<OTPsAuthenticateResponse>;
}
type CryptoWalletAuthenticateStartOptions = {
    crypto_wallet_address: string;
    crypto_wallet_type: string;
};
type CryptoWalletAuthenticateStartResponse = ResponseCommon & {
    challenge: string;
};
type CryptoWalletAuthenticateOptions = SessionDurationOptions & {
    crypto_wallet_address: string;
    crypto_wallet_type: string;
    signature: string;
};
type CryptoWalletAuthenticateResponse = AuthenticateResponse;
interface IHeadlessCryptoWalletClient {
    authenticateStart(options: CryptoWalletAuthenticateStartOptions): Promise<CryptoWalletAuthenticateStartResponse>;
    authenticate(options: CryptoWalletAuthenticateOptions): Promise<CryptoWalletAuthenticateResponse>;
}
type TOTPCreateOptions = {
    expiration_minutes: number;
};
type TOTPCreateResponse = ResponseCommon & {
    totp_id: string;
    secret: string;
    qr_code: string;
    recovery_codes: string[];
};
type TOTPAuthenticateOptions = SessionDurationOptions & {
    totp_code: string;
};
type TOTPAuthenticateResponse = AuthenticateResponse & {
    totp_id: string;
};
type TOTPRecoveryCodesResponse = ResponseCommon & {
    user_id: string;
    totps: {
        totp_id: string;
        verified: boolean;
        recovery_codes: string[];
    };
};
type TOTPRecoverOptions = SessionDurationOptions & {
    recovery_code: string;
};
type TOTPRecoverResponse = AuthenticateResponse & {
    totp_id: string;
};
interface IHeadlessTOTPClient {
    create(options: TOTPCreateOptions): Promise<TOTPCreateResponse>;
    authenticate(options: TOTPAuthenticateOptions): Promise<TOTPAuthenticateResponse>;
    recoveryCodes(): Promise<TOTPRecoveryCodesResponse>;
    recover(options: TOTPRecoverOptions): Promise<TOTPRecoverResponse>;
}
interface IHeadlessClient {
    webauthn: IHeadlessWebauthnClient;
    user: IHeadlessUserClient;
    magicLinks: IHeadlessMagicLinksClient;
    oauth: IHeadlessOAuthClient;
    session: IHeadlessSessionClient;
    otps: IHeadlessOTPsClient;
    cryptoWallets: IHeadlessCryptoWalletClient;
    totps: IHeadlessTOTPClient;
}
declare global {
    interface Window {
        Stytch?: StytchFactory;
    }
}
type StytchFactory = (publicToken: string, options?: CallbackOptions) => StytchClient;
// Client object types
interface StytchClient extends IHeadlessClient {
    mount: (mountArgs: StytchMountArgs) => void;
}
interface StytchMountArgs {
    elementId: string;
    loginOrSignupView: LoginOrSignupView;
    style: StyleConfig;
    callbacks?: CallbackOptions;
}
interface StyleConfig {
    fontFamily?: string;
    primaryColor?: string;
    primaryTextColor?: string;
    secondaryTextColor?: string;
    lightGrey?: string;
    darkGrey?: string;
    width?: string;
    hideHeaderText?: boolean;
}
interface EmailMagicLinksOptions {
    loginRedirectURL: string;
    loginExpirationMinutes?: number;
    signupRedirectURL: string;
    signupExpirationMinutes?: number;
    createUserAsPending?: boolean;
}
interface LoginOrSignupView {
    products: SDKProductTypes[];
    emailMagicLinksOptions?: EmailMagicLinksOptions;
    oauthOptions?: OAuthOptions;
    sessionOptions?: SessionOptions;
    otpOptions?: OTPOptions;
}
// Callback types
declare enum EventType {
    CallbackEvent = "CALLBACK_EVENT",
    ErrorEvent = "ERROR_EVENT",
    SuccessEvent = "SUCCESS_EVENT"
}
declare enum CallbackEventType {
    UserEventType = "USER_EVENT_TYPE"
}
interface UserEventData {
    type: CallbackEventType.UserEventType;
    email: string;
    emailId: string;
    userId: string;
}
interface MagicLinkSentData {
    message: string;
}
interface StytchError {
    message: string;
}
interface EventData {
    eventType: EventType.CallbackEvent;
    eventData: UserEventData;
}
interface SuccessData {
    eventType: EventType.SuccessEvent;
    eventData: MagicLinkSentData;
}
interface ErrorData {
    eventType: EventType.ErrorEvent;
    error: StytchError;
}
interface CallbackOptions {
    onEvent?: (data: EventData) => void;
    onSuccess?: (data: SuccessData) => void;
    onError?: (data: ErrorData) => void;
}
declare enum SDKProductTypes {
    emailMagicLinks = "emailMagicLinks",
    oauth = "oauth",
    otp = "otp",
    crypto = "crypto"
}
declare enum OAuthProvidersTypes {
    Google = "google",
    Microsoft = "microsoft",
    Apple = "apple",
    Github = "github",
    GitLab = "gitlab",
    Facebook = "facebook",
    Coinbase = "coinbase",
    Discord = "discord",
    Slack = "slack",
    Amazon = "amazon",
    Bitbucket = "bitbucket",
    LinkedIn = "linkedin",
    Twitch = "twitch"
}
declare enum OneTapPositions {
    embedded = "embedded",
    floating = "floating"
}
type OAuthProvider = {
    type: OAuthProvidersTypes;
    custom_scopes?: string[];
} | {
    type: OAuthProvidersTypes.Google;
    one_tap: true;
    position: OneTapPositions;
};
type OAuthOptions = {
    loginRedirectURL?: string;
    signupRedirectURL?: string;
    providers: OAuthProvider[];
};
type SessionOptions = {
    sessionDurationMinutes: number;
};
declare enum OTPMethods {
    SMS = "sms",
    WhatsApp = "whatsapp",
    Email = "email"
}
type OTPOptions = {
    methods: Array<OTPMethods>;
    expirationMinutes: number;
};
declare const loadStytch: () => Promise<StytchFactory | null>;
declare const initStytch: (publicToken: string, options?: CallbackOptions | undefined) => StytchClient | null;
declare const loadAndInitStytch: (publicToken: string, options?: CallbackOptions | undefined) => Promise<StytchClient | null>;
export { loadStytch, WebAuthnAuthenticateStartOptions, WebAuthnAuthenticateOptions, WebAuthnAuthenticateResponse, WebAuthnRegisterResponse, WebAuthnAuthenticateStartResponse, WebAuthnRegisterStartOptions, WebAuthnRegisterStartResponse, IHeadlessWebauthnClient, Session, ResponseCommon, User, AuthenticateResponse, DeleteResponse, SessionDurationOptions, UnsubscribeFunction, SessionAuthenticateOptions, SessionAuthenticateResponse, SessionRevokeResponse, SessionOnChangeCallback, IHeadlessSessionClient, OAuthGetURLOptions, OAuthAuthenticateOptions, OAuthAuthenticateResponse, IHeadlessOAuthClient, UserOnChangeCallback, UserUpdateOptions, UserUpdateResponse, IHeadlessUserClient, MagicLinksLoginOrCreateOptions, MagicLinksLoginOrCreateResponse, MagicLinksAuthenticateOptions, MagicLinksAuthenticateResponse, IHeadlessMagicLinksClient, OTPCodeOptions, OTPAuthenticateOptions, OTPsLoginOrCreateResponse, OTPsAuthenticateResponse, IHeadlessOTPsClient, CryptoWalletAuthenticateStartOptions, CryptoWalletAuthenticateStartResponse, CryptoWalletAuthenticateOptions, CryptoWalletAuthenticateResponse, IHeadlessCryptoWalletClient, TOTPCreateOptions, TOTPCreateResponse, TOTPAuthenticateOptions, TOTPAuthenticateResponse, TOTPRecoveryCodesResponse, TOTPRecoverOptions, TOTPRecoverResponse, IHeadlessTOTPClient, IHeadlessClient, StytchFactory, StytchClient, StytchMountArgs, StyleConfig, EmailMagicLinksOptions, LoginOrSignupView, EventType, CallbackEventType, UserEventData, MagicLinkSentData, StytchError, EventData, SuccessData, ErrorData, CallbackOptions, SDKProductTypes, OAuthProvidersTypes, OneTapPositions, OAuthProvider, OAuthOptions, SessionOptions, OTPMethods, OTPOptions, initStytch, loadAndInitStytch };
